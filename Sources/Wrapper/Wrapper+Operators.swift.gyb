%{

import json

source = '../../Resources/Operators.json'

identation = '    '

def bothParametersAreSelf(signature):
  """Returns true if type of lhs and rhs of the given signature is Self."""
  if signature.find('rhs: Self') >= 0 and signature.find('lhs: Self') >= 0:
    return 1
  else:
    return 0

def buildSignature(item, lhsType, rhsType):
  """Build signature for any member."""
  signature = item['signature'].replace('-> Self', '-> WrappedValue')
  if bothParametersAreSelf(signature):
    signature = signature.replace('lhs: Self', 'lhs: ' + lhsType).replace('rhs: Self', 'rhs: ' + rhsType)
  available = item['available']
  attribute = available + '\n    ' if available else ''
  result = identation
  result += attribute + 'public ' + signature
  return result

def buildOperatorBody(item, lhsSuffix, rhsSuffix):
  """Build body for operator methods."""
  signature = item['signature']
  callName = item['callName']
  parameters = 2 if signature.find('rhs') >= 0 else 1
  if parameters == 2:
    lhs = 'lhs'
    rhs = 'rhs'
    lhsValue = lhs + (lhsSuffix if signature.find(': Self,', signature.index(lhs), signature.index(rhs)) >= 0 else '')
    rhsValue = rhs + (rhsSuffix if signature.find(': Self)', signature.index(rhs)) >= 0 else '')
    return identation + identation + 'return ' + lhsValue + ' ' + callName + ' ' + rhsValue
  else:
    lhs = 'lhs'
    return identation + identation + 'return ' + callName + lhs + '.wrapped'

warning = 'Generated with gyb. Do not edit.'

}%
// ${warning}

import Features
% with open(source) as file:
%   for wrappable in json.load(file):
%     protocol = wrappable['featureName']
%     signature = wrappable['signature']
%     parameters = 2 if signature.find('rhs') >= 0 else 1

/// Wrapper + ${protocol} extension.
extension Wrapper where WrappedValue: ${protocol} {
${buildSignature(wrappable, 'Self', 'Self')} {
${buildOperatorBody(wrappable, '.wrapped', '.wrapped')}
    }
%     if parameters == 2:
${buildSignature(wrappable, 'Self', 'WrappedValue')} {
${buildOperatorBody(wrappable, '.wrapped', '')}
    }
${buildSignature(wrappable, 'WrappedValue', 'Self')} {
${buildOperatorBody(wrappable, '', '.wrapped')}
    }
%     end
}
%   end
% end
